quicksort(array A, int l, int r)
	// Base case
	if (n = 1) return
	// Recursive steps
	p = choosePivot(A, l, r)
	partition(A, p, l, r)
	quicksort(A, 0, p)
	quicksort(A, p, n)


choosePivot(array A, int l, int r)
	// choose a random index between l and r,
	// left and right subset of indexes in array
	return random(l, r)


partition(subarray A, int p, int l, int r)
	// NOTE: MUST maintain partitioned section with
	// all elts A[l+1] to A[i-1] < p and all elts A[i] to A[j-1] > p

	// set partition elt to leftmost index
	swap A[l] and A[p]
	// let i mark spot between < p and > p in partitioned section
	// right now that's just to the right of first elt containing partition value
	i = l + 1
	
	seenGreaterThan = false
	// let j mark spot between partitioned section and unpartitioned section
	for j = l + 1 to r
		// if it's a newly seen elt that's < p and we've seen some > p
		if A[j] < p and seenGreaterThan
			// rearrange so that partitioned section still obeys
			swap A[j] and A[i]
			i++ since middle has moved
		// if it's a newly seen elt and we haven't seen some > p
		else if !seenGreaterThan and A[j] > p
			// remember that we've seen an elt > p
			seenGreaterThan = true

	// set partition elt back to proper place
	swap A[l] and A[i - 1]
